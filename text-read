
from abc import ABC, abstractmethod
from pdf2image import convert_from_bytes
import numpy as np
from PyPDF2 import PdfReader
from PIL import Image
import pytesseract
import io


DEFAULT_DPI = 50


class FileBytesToImage(ABC):

    @staticmethod
    @abstractmethod
    def convert_bytes_to_jpeg(file_bytes):
        raise NotImplementedError

    @staticmethod
    @abstractmethod
    def convert_bytes_to_text(file_bytes):
        raise NotImplementedError


class PDFBytesToImage(FileBytesToImage):

    @staticmethod
    def convert_bytes_to_jpeg(file_bytes, dpi=DEFAULT_DPI, return_array=False):
        jpeg_data = convert_from_bytes(file_bytes, fmt="jpeg", dpi=dpi)[0]
        if return_array:
            jpeg_data = np.asarray(jpeg_data)
        return jpeg_data

    @staticmethod
    def convert_bytes_to_text(file_bytes):
        pdf_data = PdfReader(
            stream=io.BytesIO(initial_bytes=file_bytes)
        )
        # receipt data should only have one page
        text_data = []
        for page in pdf_data.pages:
            text_data.append(page.extract_text())
        return "\n".join(text_data)


class JpegBytesToImage(FileBytesToImage):

    @staticmethod
    def convert_bytes_to_jpeg(file_bytes, dpi=DEFAULT_DPI, return_array=False):
        jpeg_data = Image.open(io.BytesIO(file_bytes))
        if return_array:
            jpeg_data = np.array(jpeg_data)
        return jpeg_data

    @staticmethod
    def convert_bytes_to_text(file_bytes):
        jpeg_data = Image.open(io.BytesIO(file_bytes))
        text_data = pytesseract.image_to_string(image=jpeg_data, nice=1)
        return text_data


def recognize_file(file_path):
    if file_path.lower().endswith(".pdf"):
        converter = PDFBytesToImage
    elif file_path.lower().endswith(".jpg") or file_path.lower().endswith(".jpeg"):
        converter = JpegBytesToImage
    else:
        raise ValueError("Unsupported file format. Only PDF and JPEG are supported.")

    with open(file_path, "rb") as file:
        file_bytes = file.read()

    text = converter.convert_bytes_to_text(file_bytes)
    return text

def remove_blank_lines(text):
    lines = text.split("\n")
    non_empty_lines = [line for line in lines if line.strip() != ""]
    return "\n".join(non_empty_lines)


# 将结果写回文件或输出


file_path = ""  # or "path/to/your/file.jpg"
text = recognize_file(file_path)
print(text)
